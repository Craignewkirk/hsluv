/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 13.04.2 ] */

/* [wxMaxima: input   start ] */
/* Authors: Alexei Boronine, Bastien Dejean */

/* References: */
/* https://gist.github.com/baskerville/8297428 */
/* http://www.brucelindbloom.com/ */
/* https://github.com/jrus/chromatist */
/* https://github.com/boronine/husl */
 
/* D65 white point */
refX: 0.95047;
refY: 1.0;
refZ: 1.08883;
 
lab_e: (6 / 29) ^ 3;
lab_k: (29 / 3) ^ 3;
refU: (4 * refX) / (refX + (15 * refY) + (3 * refZ));
refV: (9 * refY) / (refX + (15 * refY) + (3 * refZ));

/* Source: */
/* http://www.brucelindbloom.com/index.html?WorkingSpaceInfo.html */
 
x_r: 0.64;
y_r: 0.33;
x_g: 0.30;
y_g: 0.60;
x_b: 0.15;
y_b: 0.06;
 
X_r: x_r / y_r;
Y_r: 1;
Z_r: (1 - x_r - y_r) / y_r;
 
X_g: x_g / y_g;
Y_g: 1;
Z_g: (1 - x_g - y_g) / y_g;
 
X_b: x_b / y_b;
Y_b: 1;
Z_b: (1 - x_b - y_b) / y_b;
 
M_P: matrix([X_r, X_g, X_b],
[Y_r, Y_g, Y_b],
[Z_r, Z_g, Z_b]);
 
M_S: invert(M_P) . [refX, refY, refZ];
 
/* sRGB D65 matrices */
M_RGB_XYZ: M_P * transpose(addcol(M_S, M_S, M_S));
M_XYZ_RGB: invert(M_RGB_XYZ);

from_linear(c):=(if(c<=0.0031308) then 12.92 * c else 1.055 * c ^ (1 / 2.4) - 0.055);
/* This should be wrapped in from_linear, but since we are only
 looking at 0 and 1, it is unnecessary (plug in 0 and 1 above) */
RGBval(x, y, z, m1, m2, m3):=(x * m1 + y * m2 + z * m3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
f_inv(t):=(if (t^3>lab_e) then (t^3) else (116 * t - 16) / lab_k);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* CORRECT */
channelFromLUV(L, U, V, m1, m2, m3) := block(
    [varY, varU, varV, Y, X, Z],
    varY : f_inv((L + 16) / 116),
    varU : U / (13 * L) + refU,
    varV : V / (13 * L) + refV,
    Y    : varY * refY,
    X    : 0 - (9 * Y * varU) / ((varU - 4) * varV - varU * varV),
    Z    : (9 * Y - (15 * varV * Y) - (varV * X)) / (3 * varV),
    RGBval(X, Y, Z, m1, m2, m3)
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
channelFromLCH(L, C, H, m1, m2, m3) := block(
    [hrad, U, V],
    hrad: H / 360 * 2 * %pi,
    U: cos(hrad) * C,
    V: sin(hrad) * C,
    channelFromLUV(L, U, V, m1, m2, m3)
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
maxChroma(L, H, m1, m2, m3, t) := rhs(
    solve(channelFromLCH(L, C, H, m1, m2, m3) = t, C)[1]
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
solve(channelFromLCH(L, C, H, m1, m2, m3) = t, C);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
trigsimp(solve(diff(maxChroma(L, H, m1, m2, m3, limit), H) = 0, H)[1]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
fpprec : 6;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
block(
[L],
L: 50,
plot2d([
    maxChroma(L, x, M_XYZ_RGB[1][1], M_XYZ_RGB[1][2], M_XYZ_RGB[1][3], 0),
    maxChroma(L, x, M_XYZ_RGB[1][1], M_XYZ_RGB[1][2], M_XYZ_RGB[1][3], 1),
    maxChroma(L, x, M_XYZ_RGB[2][1], M_XYZ_RGB[2][2], M_XYZ_RGB[2][3], 0),
    maxChroma(L, x, M_XYZ_RGB[2][1], M_XYZ_RGB[2][2], M_XYZ_RGB[2][3], 1),
    maxChroma(L, x, M_XYZ_RGB[3][1], M_XYZ_RGB[3][2], M_XYZ_RGB[3][3], 0),
    maxChroma(L, x, M_XYZ_RGB[3][1], M_XYZ_RGB[3][2], M_XYZ_RGB[3][3], 1)
], [x,0,360], [y,0,200], [
    legend,
    "red = 0",
    "red = 1",
    "green = 0",
    "green = 1",
    "blue = 0",
    "blue = 1"
], [
    xlabel,
    "hue"
], [
    ylabel,
    "chroma"
])
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
solve(diff(maxChroma(L, H, m1, m2, m3, t), H) = 0, H);
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$

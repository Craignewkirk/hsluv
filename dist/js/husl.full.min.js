(function () {
    var l = function () {
    };
    l.cca = function (a, b) {
        var d = a.charCodeAt(b);
        if (d == d)return d
    };
    l.substr = function (a, b, c) {
        if (null != b && 0 != b && null != c && 0 > c)return "";
        null == c && (c = a.length);
        0 > b ? (b = a.length + b, 0 > b && (b = 0)) : 0 > c && (c = a.length + c - b);
        return a.substr(b, c)
    };
    var m = function () {
    };
    m.parseInt = function (a) {
        var b = parseInt(a, 10);
        0 != b || 120 != l.cca(a, 1) && 88 != l.cca(a, 1) || (b = parseInt(a));
        return isNaN(b) ? null : b
    };
    var r = function () {
    };
    r.hex = function (a, b) {
        var c = "";
        do c = "0123456789ABCDEF".charAt(a & 15) + c, a >>>= 4; while (0 < a);
        if (null !=
            b)for (; c.length < b;)c = "0" + c;
        return c
    };
    var g = function () {
    };
    g.intersectLineLine = function (a, b) {
        var c = (a.intercept - b.intercept) / (b.slope - a.slope);
        return {x: c, y: a.slope * c + a.intercept}
    };
    g.distanceFromOrigin = function (a) {
        return Math.sqrt(Math.pow(a.x, 2) + Math.pow(a.y, 2))
    };
    g.distanceLineFromOrigin = function (a) {
        return Math.abs(a.intercept) / Math.sqrt(Math.pow(a.slope, 2) + 1)
    };
    g.angleFromOrigin = function (a) {
        return Math.atan2(a.y, a.x)
    };
    g.normalizeAngle = function (a) {
        var b = 2 * Math.PI;
        return (a % b + b) % b
    };
    g.lengthOfRayUntilIntersect =
        function (a, b) {
            return b.intercept / (Math.sin(a) - b.slope * Math.cos(a))
        };
    g.polygonAroundOrigin = function (a) {
        for (var b = a.length, c = null, e = null, f = 0; f < b;) {
            var k = f++, h = g.distanceLineFromOrigin(a[k]);
            if (null == e || h < e) e = h, c = k
        }
        for (var e = a[c], e = g.intersectLineLine(e, {
            slope: 0 - 1 / e.slope,
            intercept: 0
        }), f = g.angleFromOrigin(e), e = [], n = 0, l = b - 1; n < l;)for (var q = n++, m = q + 1; m < b;) {
            var p = m++, k = g.intersectLineLine(a[q], a[p]), h = g.angleFromOrigin(k);
            e.push({line1: q, line2: p, intersectionPoint: k, relativeAngle: g.normalizeAngle(h - f)})
        }
        e.sort(function (a,
                         b) {
            return a.relativeAngle > b.relativeAngle ? 1 : -1
        });
        a = [c];
        b = [];
        f = 0;
        for (k = e.length; f < k;)h = f++, c = a[a.length - 1], n = e[h], h = null, n.line1 == c ? h = n.line2 : n.line2 == c && (h = n.line1), null != h && (a.push(h), b.push(n.intersectionPoint));
        return b
    };
    var b = function () {
    };
    b.getBounds = function (a) {
        for (var d = [], c = Math.pow(a + 16, 3) / 1560896, c = c > b.epsilon ? c : a / b.kappa, e = 0; 3 > e;)for (var f = e++, k = b.m[f][0], h = b.m[f][1], f = b.m[f][2], g = 0; 2 > g;) {
            var l = g++, m = (632260 * f - 126452 * h) * c + 126452 * l;
            d.push({
                slope: (284517 * k - 94839 * f) * c / m, intercept: ((838422 *
                f + 769860 * h + 731718 * k) * a * c - 769860 * l * a) / m
            })
        }
        return d
    };
    b.maxSafeChromaForL = function (a) {
        a = b.getBounds(a);
        for (var d = 1.7976931348623157E308, c = 0; 2 > c;)var e = c++, e = g.distanceLineFromOrigin(a[e]), d = Math.min(d, e);
        return d
    };
    b.maxChromaForLH = function (a, d) {
        for (var c = d / 360 * Math.PI * 2, e = b.getBounds(a), f = 1.7976931348623157E308, k = 0; k < e.length;) {
            var h = e[k];
            ++k;
            h = g.lengthOfRayUntilIntersect(c, h);
            0 <= h && (f = Math.min(f, h))
        }
        return f
    };
    b.dotProduct = function (a, b) {
        for (var c = 0, d = 0, f = a.length; d < f;)var g = d++, c = c + a[g] * b[g];
        return c
    };
    b.fromLinear = function (a) {
        return .0031308 >= a ? 12.92 * a : 1.055 * Math.pow(a, .4166666666666667) - .055
    };
    b.toLinear = function (a) {
        return .04045 < a ? Math.pow((a + .055) / 1.055, 2.4) : a / 12.92
    };
    b.xyzToRgb = function (a) {
        return [b.fromLinear(b.dotProduct(b.m[0], a)), b.fromLinear(b.dotProduct(b.m[1], a)), b.fromLinear(b.dotProduct(b.m[2], a))]
    };
    b.rgbToXyz = function (a) {
        a = [b.toLinear(a[0]), b.toLinear(a[1]), b.toLinear(a[2])];
        return [b.dotProduct(b.minv[0], a), b.dotProduct(b.minv[1], a), b.dotProduct(b.minv[2], a)]
    };
    b.yToL = function (a) {
        return a <=
        b.epsilon ? a / b.refY * b.kappa : 116 * Math.pow(a / b.refY, .3333333333333333) - 16
    };
    b.lToY = function (a) {
        return 8 >= a ? b.refY * a / b.kappa : b.refY * Math.pow((a + 16) / 116, 3)
    };
    b.xyzToLuv = function (a) {
        var d = a[0], c = a[1];
        a = d + 15 * c + 3 * a[2];
        var d = 4 * d, e = 9 * c;
        0 != a ? (d /= a, e /= a) : e = d = NaN;
        c = b.yToL(c);
        return 0 == c ? [0, 0, 0] : [c, 13 * c * (d - b.refU), 13 * c * (e - b.refV)]
    };
    b.luvToXyz = function (a) {
        var d = a[0];
        if (0 == d)return [0, 0, 0];
        var c = a[1] / (13 * d) + b.refU;
        a = a[2] / (13 * d) + b.refV;
        d = b.lToY(d);
        c = 0 - 9 * d * c / ((c - 4) * a - c * a);
        return [c, d, (9 * d - 15 * a * d - a * c) / (3 * a)]
    };
    b.luvToLch =
        function (a) {
            var b = a[0], c = a[1], e = a[2];
            a = Math.sqrt(c * c + e * e);
            1E-8 > a ? c = 0 : (c = 180 * Math.atan2(e, c) / 3.141592653589793, 0 > c && (c = 360 + c));
            return [b, a, c]
        };
    b.lchToLuv = function (a) {
        var b = a[1], c = a[2] / 360 * 2 * Math.PI;
        return [a[0], Math.cos(c) * b, Math.sin(c) * b]
    };
    b.huslToLch = function (a) {
        var d = a[0], c = a[1];
        a = a[2];
        if (99.9999999 < a)return [100, 0, d];
        if (1E-8 > a)return [0, 0, d];
        var e = b.maxChromaForLH(a, d);
        return [a, e / 100 * c, d]
    };
    b.lchToHusl = function (a) {
        var d = a[0], c = a[1];
        a = a[2];
        if (99.9999999 < d)return [a, 0, 100];
        if (1E-8 > d)return [a, 0, 0];
        var e =
            b.maxChromaForLH(d, a);
        return [a, c / e * 100, d]
    };
    b.huslpToLch = function (a) {
        var d = a[0], c = a[1];
        a = a[2];
        if (99.9999999 < a)return [100, 0, d];
        if (1E-8 > a)return [0, 0, d];
        var e = b.maxSafeChromaForL(a);
        return [a, e / 100 * c, d]
    };
    b.lchToHuslp = function (a) {
        var d = a[0], c = a[1];
        a = a[2];
        if (99.9999999 < d)return [a, 0, 100];
        if (1E-8 > d)return [a, 0, 0];
        var e = b.maxSafeChromaForL(d);
        return [a, c / e * 100, d]
    };
    b.rgbToHex = function (a) {
        for (var b = "#", c = 0, e = a.length; c < e;)var f = c++, b = b + r.hex(Math.round(255 * a[f]), 2);
        return b
    };
    b.hexToRgb = function (a) {
        a = a.toUpperCase();
        return [m.parseInt("0x" + l.substr(a, 1, 2)) / 255, m.parseInt("0x" + l.substr(a, 3, 2)) / 255, m.parseInt("0x" + l.substr(a, 5, 2)) / 255]
    };
    b.lchToRgb = function (a) {
        return b.xyzToRgb(b.luvToXyz(b.lchToLuv(a)))
    };
    b.rgbToLch = function (a) {
        return b.luvToLch(b.xyzToLuv(b.rgbToXyz(a)))
    };
    b.huslToRgb = function (a) {
        return b.lchToRgb(b.huslToLch(a))
    };
    b.rgbToHusl = function (a) {
        return b.lchToHusl(b.rgbToLch(a))
    };
    b.huslpToRgb = function (a) {
        return b.lchToRgb(b.huslpToLch(a))
    };
    b.rgbToHuslp = function (a) {
        return b.lchToHuslp(b.rgbToLch(a))
    };
    b.huslToHex =
        function (a) {
            return b.rgbToHex(b.huslToRgb(a))
        };
    b.huslpToHex = function (a) {
        return b.rgbToHex(b.huslpToRgb(a))
    };
    b.hexToHusl = function (a) {
        return b.rgbToHusl(b.hexToRgb(a))
    };
    b.hexToHuslp = function (a) {
        return b.rgbToHuslp(b.hexToRgb(a))
    };
    b.m = [[3.240969941904521, -1.537383177570093, -.498610760293], [-.96924363628087, 1.87596750150772, .041555057407175], [.055630079696993, -.20397695888897, 1.056971514242878]];
    b.minv = [[.41239079926595, .35758433938387, .18048078840183], [.21263900587151, .71516867876775, .072192315360733],
        [.019330818715591, .11919477979462, .95053215224966]];
    b.refY = 1;
    b.refU = .19783000664283;
    b.refV = .46831999493879;
    b.kappa = 903.2962962;
    b.epsilon = .0088564516;
    var p = {Husl: b, Geometry: g};
    "undefined" !== typeof jQuery && (jQuery.husl = p);
    "undefined" !== typeof module && (module.exports = p);
    "undefined" !== typeof define && define(p);
    "undefined" !== typeof window && (window.HUSL = p)
})();
